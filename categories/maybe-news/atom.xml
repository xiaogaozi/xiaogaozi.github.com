<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maybe News | Freedom]]></title>
  <link href="https://blog.xiaogaozi.org/categories/maybe-news/atom.xml" rel="self"/>
  <link href="https://blog.xiaogaozi.org/"/>
  <updated>2020-05-18T11:19:43+08:00</updated>
  <id>https://blog.xiaogaozi.org/</id>
  <author>
    <name><![CDATA[xiaogaozi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maybe News Issue #0]]></title>
    <link href="https://blog.xiaogaozi.org/2020/05/11/maybe-news-issue-0/"/>
    <updated>2020-05-11T14:44:52+08:00</updated>
    <id>https://blog.xiaogaozi.org/2020/05/11/maybe-news-issue-0</id>
    <content type="html"><![CDATA[<blockquote><p>前言：从这一期开始这个系列将会有一个正式的名字「Maybe News」，名字来源于我非常喜欢的一个国内的音乐厂牌<a href="https://en.wikipedia.org/wiki/Maybe_Mars">「兵马司」</a>（Maybe Mars）。本身我分享的内容也很有可能是一些旧闻，只不过对于我来说是还未了解的知识罢了。<a href="/2020/04/26/weekly-reading-list-issue-1/">上一期</a>的名字还是维持原样就不做修改。你也可以通过<a href="https://digest.xiaogaozi.org/maybe-news">邮件订阅</a>这个系列的文章。</p></blockquote>

<!-- more -->


<h2>LightRec: a Memory and Search-Efficient Recommender System</h2>

<p><a href="http://staff.ustc.edu.cn/~liandefu/paper/lightrec.pdf">[链接]</a></p>

<p>这篇论文由微软亚洲研究院与中科大共同发表在 <a href="https://www2020.thewebconf.org">WWW 2020</a> 会议上，提出了一种新的表示物品向量的方法，大幅降低存储向量所需空间的同时还显著提升了召回效果。一个直观的数据：LightRec 将 1 千亿 256 维双精度向量的内存占用从 9.5 GB 降到了 337 MB，这是非常惊人的！现在工业界常用的 <a href="https://github.com/nmslib/nmslib">nmslib</a> 和 <a href="https://github.com/facebookresearch/faiss">Faiss</a> 都无法实现如此高的压缩比，因此很多时候都需要借助分布式存储来满足业务场景，如果真的如论文中所描述的一样那单机存储在未来很长一段时间来说都是完全足够的。</p>

<p>这里简单解释一下为什么向量召回对于当下的推荐系统如此重要，传统的召回是基于倒排索引的方式，正如我在<a href="/2020/04/21/how-to-design-a-distributed-index-framework-part-1/">之前的一篇文章</a>中介绍的那样，召回与模型优化目标之间的差异较大导致召回效果始终较差。自从 <a href="https://www.microsoft.com/en-us/research/publication/learning-deep-structured-semantic-models-for-web-search-using-clickthrough-data">Learning Deep Structured Semantic Models for Web Search using Clickthrough Data</a> 这篇论文（同样也是由微软研究院发表）提出 DSSM（Deep Structured Semantic Models）以后，将召回与 DNN 进行结合，显著提升了召回的效果，在很多公司的实践中也的确论证了 DSSM 是一个非常有效的召回方式。DSSM 的核心是分别为物品和用户生成向量，再通过 ANN（Approximate Nearest Neighbors）查询相似向量从而实现召回。因此向量的存储和查询效率决定了在线请求的效果和性能，如何平衡向量索引的空间占用和召回效果是非常重要的。</p>

<p>微软研究院的微信公众号有一篇简短的针对这篇论文的<a href="https://mp.weixin.qq.com/s/E43gc16A3OVWgxyfdUxr7g">中文版介绍</a>，有兴趣也可以先看这篇文章。</p>

<h2>TFRT: A new TensorFlow runtime</h2>

<p><a href="https://blog.tensorflow.org/2020/04/tfrt-new-tensorflow-runtime.html">[链接]</a></p>

<p>Google 近期开源了新的 TensorFlow 运行时 TFRT（TensorFlow Runtime），这是一个介于上层用户代码和底层设备之间的执行环境。项目的愿景是实现一个统一的、可扩展的、性能首屈一指（best-in-class）的，同时可跨越多种领域硬件（domain specific hardware）的运行时。未来 TFRT 会成为 TensorFlow 默认的运行时，目前还在集成中。从 ResNet-50 的 inference 测试结果上看平均提升了 28% 的性能。</p>

<h2>Why We Need DevOps for ML Data</h2>

<p><a href="https://tecton.ai/blog/devops-ml-data">[链接]</a></p>

<p>虽然这是一篇产品推广软文（在文章最后一节），但是文章中普及的关于 DevOps 与机器学习之间的关系还是非常有价值的。很多人可能以为机器学习就只是模型算法而已，诚然这是学术研究的基石，但是要真正把机器学习应用到工业界光有算法是远远不够的。Google 著名的 <a href="https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf.">Hidden Technical Debt in Machine Learning Systems</a> 论文已经论述了那些隐藏在模型背后的往往被人忽略的技术，模型规模越大需要付出的工程努力也是越大的（所以很多时候大公司才需要自己造轮子）。作为衍生阅读也可以同时看看 <a href="https://towardsdatascience.com/how-linkedin-uber-lyft-airbnb-and-netflix-are-solving-data-management-and-discovery-for-machine-9b79ee9184bb">How LinkedIn, Uber, Lyft, Airbnb and Netflix are Solving Data Management and Discovery for Machine Learning Solutions</a> 这篇文章。</p>

<h2>Mid-stack inlining in Go</h2>

<p><a href="https://dave.cheney.net/2020/05/02/mid-stack-inlining-in-go">[链接]</a></p>

<p>Dave Cheney 继续科普 Go 的一些实现细节，这次的主题是编译器如何实现 mid-stack inlining。所谓 mid-stack inlining 就是将那些调用了其它函数的函数变成 inline，相对的还有 leaf inlining，即不调用任何其它函数。有兴趣了解 leaf inlining 的可以看 Dave Cheney 的<a href="https://dave.cheney.net/2020/04/25/inlining-optimisations-in-go">上一篇文章</a>。</p>

<h2>Why We Leverage Multi-tenancy in Uber’s Microservice Architecture</h2>

<p><a href="https://eng.uber.com/multitenancy-microservice-architecture">[链接]</a></p>

<p>Uber 介绍了他们在微服务领域实践的一个经验「多租户」，简单讲就是让请求链路上的所有组件和系统都能够感知「租户」这个概念，比如租户可以分为生产环境和测试环境。Uber 列举了两个应用场景：集成测试和 Canary 部署，这两个场景都依赖生产环境的请求，有了租户的概念就可以自动进行请求路由和数据隔离。愿景其实挺美好，但「代价」也是不容忽视，前面讲了要让所有组件和系统都感知就非常依赖基础组件的统一，要解决这个问题很多时候并不单纯是一个技术问题。如何做好不同环境的数据隔离也是一个难题，关于这一点文章并没有做特别详细的介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Reading List Issue #1]]></title>
    <link href="https://blog.xiaogaozi.org/2020/04/26/weekly-reading-list-issue-1/"/>
    <updated>2020-04-26T12:22:08+08:00</updated>
    <id>https://blog.xiaogaozi.org/2020/04/26/weekly-reading-list-issue-1</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>FoundationDB Record Layer: A Multi-Tenant Structured Datastore</h2>

<p><a href="https://arxiv.org/abs/1901.04452">[链接]</a></p>

<p>FoundationDB 2015 年被 Apple <a href="https://techcrunch.com/2015/03/24/apple-acquires-durable-database-company-foundationdb">收购</a>并于 2018 年<a href="https://www.foundationdb.org/blog/foundationdb-is-open-source">开源</a>，作为 Apple 为数不多的开源项目受到广泛关注。简单介绍 FoundationDB 是一个基于 Paxos 的分布式 KV 存储，底层存储结构是 B-tree（是的，并不是 LSM tree），定位上跟 Google 的 Spanner 非常相似。这篇论文发表在 <a href="https://sigmod2019.org/sigmod_industry_list">SIGMOD 2019</a>，介绍的是基于 FoundationDB 的 record-oriented 结构化存储框架（也已经<a href="https://github.com/FoundationDB/fdb-record-layer">开源</a>）。<a href="https://apple.github.io/foundationdb/layer-concept.html">Layer</a> 是 FoundationDB 一个很有特色的概念，在最基本的 KV 上无限扩展更加复杂的数据模型。这个框架整体上有几个亮点：</p>

<ul>
<li>基于 Protocol Buffers 的数据模型定义</li>
<li>丰富的索引类型支持（单字段索引、嵌套字段索引、列表字段索引、聚合索引、rank 索引、全文索引、多字段联合索引等），并且索引是可以跨表的（这里简单将 record type 理解为表）。</li>
<li>基于 Java 的查询 API（并不是 SQL）</li>
</ul>


<p>目前已经被应用在 <a href="https://developer.apple.com/icloud/cloudkit">CloudKit</a>，替代旧的 Cassandra + Solr 架构（旧架构也有<a href="https://dl.acm.org/doi/10.1145/3164135.3164138">一篇论文</a>介绍）。CloudKit 作为一个庞大的存储服务供所有 Apple 生态的应用和用户使用，这也就是论文标题中 Multi-Tenant 的含义。</p>

<h2>Introducing Dispatch</h2>

<p><a href="https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072">[链接]</a></p>

<p>Incident 管理一直是 DevOps 领域比较热门的话题，Netflix 开源了他们自己的 incident 管理工具 <a href="https://github.com/Netflix/dispatch">Dispatch</a>，更早之前 LinkedIn 也<a href="https://engineering.linkedin.com/blog/2017/06/open-sourcing-iris-and-oncall">开源</a>过类似的东西。</p>

<h2>Agent57: Outperforming the human Atari benchmark</h2>

<p><a href="https://deepmind.com/blog/article/Agent57-Outperforming-the-human-Atari-benchmark">[链接]</a></p>

<p>大众对于 DeepMind 的认知恐怕就是<a href="https://en.wikipedia.org/wiki/AlphaGo">下下围棋</a>、<a href="https://deepmind.com/blog/article/alphastar-mastering-real-time-strategy-game-starcraft-ii">打打星际</a>，最近又搞起了雅达利的游戏，可以说是把强化学习玩儿出花儿了。最新一代的 Agent57 已经可以在全部 57 个游戏里战胜人类玩家。</p>

<h2>An Illustrated Guide to Graph Neural Networks</h2>

<p><a href="https://medium.com/dair-ai/an-illustrated-guide-to-graph-neural-networks-d5564a551783">[链接]</a></p>

<p>Graph Neural Networks（GNN）最近几年已经火得不行，Amazon 也开源了相关的框架 <a href="https://www.dgl.ai/">DGL</a>。这篇文章以一种简单的示意图的形式介绍什么是 GNN，帮助不了解 GNN 的人建立一个简单的认知。</p>

<h2>Debugging with Delve</h2>

<p><a href="https://tpaschalis.github.io/delve-debugging">[链接]</a></p>

<p><a href="https://github.com/go-delve/delve">Delve</a> 是一个 Go 语言的 debugger，Go 官方也<a href="https://golang.org/doc/gdb">推荐</a>优先考虑使用它而不是 GDB。这篇文章简单介绍了 Delve 的基本功能，其实跟 GDB 的使用方式很类似，但是 Delve 的亮点在于可以理解 Go 语言的语义以及调试 goroutine。</p>

<h2>gofiber/fiber</h2>

<p><a href="https://github.com/gofiber/fiber">[链接]</a></p>

<p>Fiber 是（又）一个 Go 语言的 HTTP 框架，设计上很大程度受了 Node.js 中非常流行的 <a href="https://expressjs.com">Express</a> 启发（API 非常相似）。得益于底层使用的 <a href="https://github.com/valyala/fasthttp">fasthttp</a> 库，在 Fiber 自己的<a href="https://docs.gofiber.io/benchmarks">评测</a>中超越了很多市面上现有的框架。</p>
]]></content>
  </entry>
  
</feed>
